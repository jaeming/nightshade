<main>
  Main element here...
  <p id="main-text" class="foo bar moar" small data-role="test">
    a paragraph...
  </p>
  <hr />
  <p>this is a prop: {myProp}</p>
  <p>we can mutate it locally but that will not sync upwards.</p>
  <input type="text" value="{myProp}" input="{mutateProp}" />
  <hr />
  <div>
    some child...
    <Child
      hi="{msg}"
      increment="{increment}"
      count="{count}"
      foobar="foobar"
    ></Child>
  </div>
  <h2 class="{style}">the count is {count}</h2>
  <button click="{increment}">increment count</button>
  <button click="{decrement}">decrement count</button>
  <h3>{msg}, {question}... again: {msg}</h3>
  <div>
    <p>lets evaluate and expression:</p>
    <p>2 + 2 = {2 + 2}</p>
    <p>Should I stay or should I go? {true ? "go" : "stay"}</p>
  </div>
  <p>items: {msg}</p>
  <ul>
    <li each="{items as item, index}" class="{style}">
      {index + 1}: hi to {item.name}
    </li>
  </ul>
  <br />
  <div large>
    <input type="text" value="{someText}" input="{handleInput}" />
    <p>this is what you entered: {someText}</p>
    <button click="{addText}">add text to list</button>
    <button click="{clearText}">clear text</button>
  </div>
  <hr />
  <div>
    <h3>lets do some conditional rendering</h3>
    <article if="{showArticle}">~Now you see me~</article>
    <br />
    <button click="{toggleShow}">toggle visibility</button>
  </div>
  <hr />
  more main here!
</main>

<script>
  import Child from './child.reflect'

  export default class Foo {
    components = { Child }

    foo = 'oppppSSS!'
    msg = 'Hello World!'
    question = 'How are you tonight?'
    count = 1
    style = 'counter-class'
    someText = 'test'
    items = []
    showArticle = true

    onMount () {
      console.log('on mount', (this.count = 3))
    }

    onDispose () {
      console.log('on dispose', this.showArticle)
    }

    increment () {
      this.count++
    }

    decrement () {
      this.count--
    }

    handleInput (e) {
      this.someText = e.target.value
    }

    mutateProp (e) {
      this.myProp = e.target.value
    }

    addText () {
      this.items = [...this.items, { name: this.someText }]
    }

    clearText () {
      this.someText = ''
    }

    toggleShow () {
      this.showArticle = !this.showArticle
    }
  }
</script>
